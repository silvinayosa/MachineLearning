# -*- coding: utf-8 -*-
"""SVM_DataMining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IEkEr_vHFT2ITbnPnACJRMO6xKeL5pWv

Import Modules and Load Dataset
"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report, accuracy_score


df = pd.read_csv('/content/cardio_train.csv', sep= ';')

df.dropna(inplace=True)

"""Here are more detail to understand the datasets

- Age | Objective Feature | age | int (days)
- Height | Objective Feature | height | int (cm) |
- Weight | Objective Feature | weight | float (kg) |
- Gender | Objective Feature | gender | categorical code |
- Systolic blood pressure | Examination Feature | ap_hi | int |
- Diastolic blood pressure | Examination Feature | ap_lo | int |
- Cholesterol | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |
- Glucose | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |
- Smoking | Subjective Feature | smoke | binary |
- Alcohol intake | Subjective Feature | alco | binary |
- Physical activity | Subjective Feature | active | binary |
- Presence or absence of cardiovascular disease | Target Variable | cardio | binary |

Simple Data Analysis
"""

decision_matrix = df.drop(columns='id').groupby('cardio').mean()

print("\nDecision Matrix:")
print(decision_matrix)

import matplotlib.pyplot as plt
import seaborn as sns

# Correlation matrix
correlation_matrix = df.drop(columns='id').corr()

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

df['bmi']= df['weight']/((df['height']/100)**2)

"""Separating features and target variables"""

# Separate features and target variable
X = df.drop(['id', 'cardio', 'weight', 'height'], axis=1)
y = df['cardio']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Build and Train the Model"""

# SVM classifier
svm = SVC(kernel = 'linear', random_state=42)
svm.fit(X_train_scaled, y_train)

# Random Forest Classifier
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train_scaled, y_train)

# Gradient Boosting Classifier
gb = GradientBoostingClassifier(random_state=42)
gb.fit(X_train_scaled, y_train)

"""Making Predictions and Checking the accuracy"""

# Make predictions
svm_pred = svm.predict(X_test_scaled)
rf_pred = rf.predict(X_test_scaled)
gb_pred = gb.predict(X_test_scaled)

# Evaluate the model accuracy
svm_accuracy = accuracy_score(y_test, svm_pred)
print(f"SVM Accuracy: {svm_accuracy:.2f}")
rf_accuracy = accuracy_score(y_test, rf_pred)
print(f"Random Forest Accuracy: {rf_accuracy:.2f}")
gb_accuracy = accuracy_score(y_test, gb_pred)
print(f"Gradient Boosting Accuracy: {gb_accuracy:.2f}")

print('#'*100)
print()

# Evaluate the report
svm_report = classification_report(y_test, svm_pred)
print("SVM Classification Report:")
print(svm_report)
print('#'*100)

rf_report = classification_report(y_test, rf_pred)
print("Random Forest Classification Report:")
print(rf_report)
print('#'*100)

gb_report = classification_report(y_test, gb_pred)
print("Gradient Boosting Classification Report:")
print(gb_report)

"""Precision: how many positive predictions made are true

Recall: how many positive case are predicted correctly

F1-score: harmonic mean of precision and recall (precision*recall)/(precision+recall)

Support: actual number in dataset

Improve the accuracy of **SVM** classifier
"""

param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': ['scale', 'auto'],
    'kernel': ['linear', 'rbf', 'poly'],
    'degree': [2, 3, 4]  # Only relevant for 'poly' kernel
}

# Initialize and perform Grid Search with cross-validation
svm = SVC(random_state=42)
grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, y_train)

# Get the best estimator
best_svm = grid_search.best_estimator_

# Make predictions with the best estimator
y_pred = best_svm.predict(X_test_scaled)

# Evaluate the improved model
best_accuracy = accuracy_score(y_test, y_pred)
best_report = classification_report(y_test, y_pred)

# Display the best parameters and the evaluation report
print(f"Best Parameters: {grid_search.best_params_}")
print(f"Improved Accuracy: {best_accuracy:.2f}")
print("Improved Classification Report:")
print(best_report)

"""Predict user input"""

print('Welcome to cardiovascular disease check!')
age = int(input('Please enter your age! (in days): '))
height = int(input('Please enter your height! (in cm): '))
weight = float(input('Please enter your weight! (in kg): '))
gender = int(input('Please enter your gender! (1 for male, 2 for female): '))
ap_hi= int(input('Please enter your systolic blood pressure! (in mmHg): '))
ap_lo = int(input('Please enter your diastolic blood pressure! (in mmHg): '))
Cholesterol = int(input('Please indicate your cholesterol level: 1 for normal, 2 for above normal, and 3 for high.'))
Glucose = int(input('Please indicate your glucose level: 1 for normal, 2 for above normal, and 3 for high.'))
smoke = bool(input('Are you a smoker? (1 for yes, 0 for no): '))
alco = bool(input('Do you drink alcohol? (1 for yes, 0 for no): '))
active = bool(input('Are you active? (1 for yes, 0 for no): '))
model = input('Select your prediction model: SVM, Random Forest, or Gradient Boosting: ')

bmi = weight/((height/100)**2)

if model == 'SVM':
  result = svm.predict([[age, gender, ap_hi, ap_lo, Cholesterol, Glucose, smoke, alco, active, bmi]])
elif model == 'Random Forest':
  result = rf.predict([[age, gender, ap_hi, ap_lo, Cholesterol, Glucose, smoke, alco, active, bmi]])
else:
  result = gb.predict([[age, gender, ap_hi, ap_lo, Cholesterol, Glucose, smoke, alco, active, bmi]])

if result == 0:
  print('You are not likely to have cardiovascular disease.')
elif result == 10:
  print('You are likely to have cardiovascular disease.')

# confusion matrix
conf = confusion_matrix(y_test, y_pred)
print(conf)
